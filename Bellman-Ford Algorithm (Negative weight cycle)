Given a weighted directed graph with n nodes and m edges. Nodes are labeled from 0 to n-1, 
the task is to check if it contains a negative weight cycle or not.
Note: edges[i] is defined as u, v and weight.
 
Example 1:

Input: n = 3, edges = {{0,1,-1},{1,2,-2},
{2,0,-3}}
Output: 1
Explanation: The graph contains negative weight
cycle as 0->1->2->0 with weight -1,-2,-3,-1.
Example 2:

Input: n = 3, edges = {{0,1,-1},{1,2,-2},
{2,0,3}}
Output: 0
Explanation: The graph does not contain any
negative weight cycle.

----------------------------------------------------------------------------------------------------
int isNegativeWeightCycle(int n, vector<vector<int>>edges){
	    // Code here
	    int dp[n] = {INT_MAX - 1};
	    dp[0] = 0;
	    for(int i = 1;i < n;i++){               //relaxing edges (n - 1) times
	        for(int j = 0;j < edges.size();j++){
	            int u = edges[j][0];
	            int v = edges[j][1];
	            int cost = edges[j][2];
	            if(dp[u] + cost < dp[v]){
	                dp[v] = dp[u] + cost;       
	            }
	        }
	    }
	    for(int j = 0;j < edges.size();j++){
	        int u = edges[j][0];
            int v = edges[j][1];
            int cost = edges[j][2];
            if(dp[u] + cost < dp[v]){     // if even after n-1 relaxation it relaxes more, it mmeans it has -ve wieght cycle.
                return 1;
            }
	    }
	    return 0;
	}
