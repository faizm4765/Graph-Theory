Given an m x n 2d grid map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically.
You may assume all four edges of the grid are all surrounded by water.

 
Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3



-------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------


class Solution {
public:
    
   int vis[306][306];
    
    Solution(){
    
         memset(vis, 0, sizeof(vis[0][0]) * 306 * 306);
    }
    
    bool isValid(int x,int y,int row,int col,vector<vector<char>>& grid)    {
        if(x < 0 or y < 0 or x == row or y == col)
            return false;
        
        if(vis[x][y] == 1 or grid[x][y] == '0')
            return false;
        
        return true;
    }
    
    void dfs(int x,int y,vector<vector<char>>& grid,int row,int col){
        
        int dx[] = {-1,0,1,0};
        int dy[] = {0,1,0,-1};
        vis[x][y] = 1;
        for(int i=0;i<4;i++){
            
            if(isValid(x + dx[i],y + dy[i],row,col,grid)){
                dfs(x+dx[i],y+dy[i],grid,row,col);
            }
        }
        
    }
    
    int numIslands(vector<vector<char>>& grid) {
        
        int cnt = 0,m = grid.size(),n = grid[0].size(),i,j;
       
        for(i=0;i<m;i++){
            for(j=0;j<n;j++){
                
                if(grid[i][j] == '1' and vis[i][j] == false){
                    dfs(i,j,grid,m,n);
                    cnt++;
                }
            }
        }
        return cnt;
    }
};
