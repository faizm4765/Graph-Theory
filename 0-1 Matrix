https://leetcode.com/problems/01-matrix/

Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.

The distance between two adjacent cells is 1.

Input: mat = [[0,0,0],[0,1,0],[1,1,1]]
Output: [[0,0,0],[0,1,0],[1,2,1]]

i/p:        o/p:
0 0 0       0 0 0 
0 1 0       0 1 0 
1 1 1       1 2 1

--------------------------------------------------------------------------------------------------
int dx[] = {-1,0,1,0};
int dy[] = {0,1,0,-1};

class Solution {
public:
    bool isValid(int x,int y,int m,int n,vector<vector<int>>& mat){
        if(x < 0 or x >= m or y < 0 or y >= n)
            return false;
        if(mat[x][y] != -1)
            return false;
        return true;
    }
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        queue<pair<int,int>> q;
        int m = mat.size(),n = mat[0].size(),i,j;
        for(i = 0;i < m;i++){
            for(j = 0;j < n;j++){
                if(mat[i][j] == 0){
                    q.push({i,j});
                }
                else{
                    mat[i][j] = -1;
                }
            }
        }
        while(!q.empty()){
            pair<int,int> cur = q.front();
            q.pop();
            // cout<<cur.first<<" ";
            for(i = 0;i < 4;i++){
                int nx = cur.first + dx[i];
                int ny = cur.second + dy[i];
                if(isValid(nx,ny,m,n,mat)){
                    mat[nx][ny] = mat[cur.first][cur.second] + 1;
                    q.push({nx,ny});
                }
            }
        }
        return mat;
    }
};
